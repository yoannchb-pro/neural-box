{"version":3,"file":"index.js","sources":["../src/game/Sprite.ts","../src/game/velocity.ts","../src/game/Base.ts","../src/game/Background.ts","../src/game/Pipe.ts","../../neural-box/src/utils/randomUniform.ts","../../neural-box/src/network/Connection.ts","../../neural-box/src/network/NeuralNode.ts","../../neural-box/src/network/Network.ts","../../neural-box/src/utils/sigmoid.ts","../src/game/Bird.ts","../src/game/Score.ts","../src/index.ts"],"sourcesContent":["export class Sprite {\n  public sprite: HTMLImageElement = new Image();\n\n  constructor(src: string) {\n    this.sprite.src = `./sprites/${src}`;\n  }\n}\n","export const velocity = 4;\n","import { Sprite } from './Sprite';\nimport { velocity } from './velocity';\n\ntype ConstructorProps = {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nconst BASE_SPRITE = new Sprite('base.png').sprite;\n\nexport class Base {\n  private x = 0;\n\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  public static BASE_SIZE = 100;\n\n  constructor(params: ConstructorProps) {\n    this.canvas = params.canvas;\n    this.ctx = params.ctx;\n  }\n\n  update() {\n    this.x -= velocity;\n    if (this.x <= -this.canvas.width) this.x = 0;\n  }\n\n  draw() {\n    this.ctx.drawImage(\n      BASE_SPRITE,\n      this.x,\n      this.canvas.height - Base.BASE_SIZE,\n      this.canvas.width,\n      Base.BASE_SIZE\n    );\n\n    this.ctx.drawImage(\n      BASE_SPRITE,\n      this.x + this.canvas.width,\n      this.canvas.height - Base.BASE_SIZE,\n      this.canvas.width,\n      Base.BASE_SIZE\n    );\n  }\n}\n","import { Base } from './Base';\nimport { Sprite } from './Sprite';\ntype ConstructorProps = {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nconst BACKGROUND_SPRITE = new Sprite('background.png').sprite;\n\nexport class Background {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(params: ConstructorProps) {\n    this.canvas = params.canvas;\n    this.ctx = params.ctx;\n  }\n\n  draw() {\n    this.ctx.drawImage(\n      BACKGROUND_SPRITE,\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height - Base.BASE_SIZE\n    );\n  }\n}\n","import { Base } from './Base';\nimport { Sprite } from './Sprite';\nimport { velocity } from './velocity';\n\ntype ConstructorProps = {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  x: number;\n};\n\nconst PIPEDOWN_SPRITE = new Sprite('pipedown.png').sprite;\nconst PIPEUP_SPRITE = new Sprite('pipeup.png').sprite;\n\nexport class Pipe {\n  public x: number;\n  public width = 70;\n  public height: number;\n\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  public passed = false;\n\n  public static PIPE_DISTANCE = 150;\n  public static PIPE_RANGE = 250;\n\n  constructor(params: ConstructorProps) {\n    this.canvas = params.canvas;\n    this.ctx = params.ctx;\n\n    this.x = params.x;\n\n    this.height = Math.max(\n      Math.random() * this.canvas.height - Base.BASE_SIZE - Pipe.PIPE_DISTANCE * 1.5,\n      200\n    );\n  }\n\n  update() {\n    this.x -= velocity;\n    if (this.x <= -this.canvas.width) this.x = 0;\n  }\n\n  draw() {\n    // top\n    this.ctx.drawImage(\n      PIPEDOWN_SPRITE,\n      0,\n      PIPEDOWN_SPRITE.height - this.height,\n      PIPEDOWN_SPRITE.width,\n      this.height,\n      this.x,\n      0,\n      this.width,\n      this.height\n    );\n\n    // bottom\n    const bottomY = this.height + Pipe.PIPE_DISTANCE;\n    this.ctx.drawImage(\n      PIPEUP_SPRITE,\n      0,\n      0,\n      PIPEUP_SPRITE.width,\n      this.canvas.height - Base.BASE_SIZE - bottomY,\n      this.x,\n      bottomY,\n      this.width,\n      this.canvas.height - Base.BASE_SIZE - bottomY\n    );\n  }\n}\n","/**\n * Uniform distribution of a random number in a range\n * @param min\n * @param max\n * @returns\n */\nexport function randomUniform(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n","import { randomUniform } from '../utils/randomUniform';\nimport type { NeuralNode } from './NeuralNode';\n\ntype ConstructorProps = {\n  from: NeuralNode;\n  to: NeuralNode;\n  weight?: number;\n  weightRange?: [number, number];\n};\n\nclass InnovationNumberManager {\n  private static currentInnovationNumber = 0;\n  private static innovationHistory: Map<string, number> = new Map();\n\n  static getInnovationNumber(fromNodeId: number, toNodeId: number): number {\n    const key = `${fromNodeId}-${toNodeId}`;\n\n    if (this.innovationHistory.has(key)) {\n      return this.innovationHistory.get(key)!;\n    }\n\n    const newInnovationNumber = this.currentInnovationNumber++;\n    this.innovationHistory.set(key, newInnovationNumber);\n    return newInnovationNumber;\n  }\n}\n\nexport class Connection {\n  public innovationNumber: number;\n\n  public from: NeuralNode;\n  public to: NeuralNode;\n  public weight: number;\n  public enbaled = true;\n\n  public static DEFAULT_WEIGHT_RANGE = [-0.5, 0.5];\n\n  constructor(params: ConstructorProps) {\n    this.innovationNumber = InnovationNumberManager.getInnovationNumber(\n      params.from.id,\n      params.to.id\n    );\n    this.from = params.from;\n    this.to = params.to;\n    this.weight =\n      params.weight ??\n      randomUniform(\n        params.weightRange?.[0] ?? Connection.DEFAULT_WEIGHT_RANGE[0],\n        params.weightRange?.[1] ?? Connection.DEFAULT_WEIGHT_RANGE[1]\n      );\n  }\n\n  clone() {\n    const copy = new Connection({\n      from: this.from,\n      to: this.to,\n      weight: this.weight\n    });\n    return copy;\n  }\n}\n","export enum NodeType {\n  HIDDEN,\n  INPUT,\n  OUTPUT,\n  BIAS\n}\n\ntype ConstructorProps = {\n  id: number;\n  nodeType: NodeType;\n};\n\nexport class NeuralNode {\n  public id: number;\n  public output = 0;\n  public nodeType: NodeType;\n\n  constructor(params: ConstructorProps) {\n    this.id = params.id;\n    this.nodeType = params.nodeType;\n    if (this.nodeType === NodeType.BIAS) this.output = 1;\n  }\n\n  clone() {\n    const copy = new NeuralNode({\n      id: this.id,\n      nodeType: this.nodeType\n    });\n    copy.output = this.output;\n    return copy;\n  }\n}\n","import { randomUniform } from '../utils/randomUniform';\nimport { sigmoid } from '../utils/sigmoid';\nimport { Connection } from './Connection';\nimport { NeuralNode, NodeType } from './NeuralNode';\n\ntype ConstructorProps = {\n  inputLength: number;\n  outputLength: number;\n  hiddenLength?: number[];\n  hiddenLayers?: number;\n\n  weightRange?: [number, number];\n};\n\nexport class Network {\n  private currentNodeId = 0;\n\n  public fitness: number = 0;\n\n  private inputLength: number;\n  private outputLength: number;\n  private hiddenLength: number[];\n  private hiddenLayers: number;\n\n  private weightRange: ConstructorProps['weightRange'];\n\n  private connections: Connection[] = [];\n  private nodes: NeuralNode[] = [];\n\n  constructor(params: ConstructorProps) {\n    this.inputLength = params.inputLength;\n    this.outputLength = params.outputLength;\n\n    this.weightRange = params.weightRange;\n\n    if (Array.isArray(params.hiddenLength) && params.hiddenLength.length !== params.hiddenLayers) {\n      throw new Error(\n        `Invalide parameter \"hiddenLength\" (should be an array of the same size as \"hiddenLayers\").`\n      );\n    }\n\n    this.hiddenLayers = params.hiddenLayers ?? 0;\n    this.hiddenLength = params.hiddenLength ?? [0];\n  }\n\n  /**\n   * Generate the full network with all connections and all nodes\n   */\n  generateFullNetwork() {\n    let nodesOfPrecedentLayer: NeuralNode[] = [];\n\n    // Input bias\n    const bias = new NeuralNode({\n      id: ++this.currentNodeId,\n      nodeType: NodeType.BIAS\n    });\n    this.nodes.push(bias);\n    nodesOfPrecedentLayer.push(bias);\n\n    // Inputs\n    for (let i = 0; i < this.inputLength; ++i) {\n      const input = new NeuralNode({\n        id: ++this.currentNodeId,\n        nodeType: NodeType.INPUT\n      });\n      nodesOfPrecedentLayer.push(input);\n      this.nodes.push(input);\n    }\n\n    for (let i = 0; i < this.hiddenLayers; ++i) {\n      const hiddenLength = this.hiddenLength[i];\n      // Hidden bias\n      const bias = new NeuralNode({\n        id: ++this.currentNodeId,\n        nodeType: NodeType.BIAS\n      });\n      const hiddenCreatedNodes: NeuralNode[] = [bias];\n\n      for (let j = 0; j < hiddenLength; ++j) {\n        const hidden = new NeuralNode({\n          id: ++this.currentNodeId,\n          nodeType: NodeType.HIDDEN\n        });\n\n        // We create the connection with the precedents nodes\n        for (const precedentLayerNode of nodesOfPrecedentLayer) {\n          const connection = new Connection({\n            from: precedentLayerNode,\n            to: hidden,\n            weightRange: this.weightRange\n          });\n          this.connections.push(connection);\n        }\n\n        hiddenCreatedNodes.push(hidden);\n        this.nodes.push(hidden);\n      }\n\n      nodesOfPrecedentLayer = hiddenCreatedNodes;\n    }\n\n    for (let i = 0; i < this.outputLength; ++i) {\n      const output = new NeuralNode({\n        id: ++this.currentNodeId,\n        nodeType: NodeType.OUTPUT\n      });\n\n      // We create the connection with the precedents nodes\n      for (const precedentLayerNode of nodesOfPrecedentLayer) {\n        const connection = new Connection({\n          from: precedentLayerNode,\n          to: output,\n          weightRange: this.weightRange\n        });\n        this.connections.push(connection);\n      }\n\n      this.nodes.push(output);\n    }\n  }\n\n  /**\n   * Calculate the output for a specific input\n   * @param inputs\n   * @returns\n   */\n  input(inputs: number[]): number[] {\n    if (inputs.length !== this.inputLength) {\n      throw new Error('Number of inputs must match the number of \"inputLength\".');\n    }\n\n    const inputNodes = this.nodes.filter(node => node.nodeType === NodeType.INPUT);\n    const outputNodes = this.nodes.filter(node => node.nodeType === NodeType.OUTPUT);\n\n    const inputsToReset = this.nodes.filter(\n      node => node.nodeType !== NodeType.INPUT && node.nodeType !== NodeType.BIAS\n    );\n    const noneInputNodes = this.nodes.filter(node => node.nodeType !== NodeType.INPUT);\n\n    // We reset the hiddens/output nodes\n    for (const inputToReset of inputsToReset) {\n      inputToReset.output = 0;\n    }\n\n    // We set the inputs node with the correct input value\n    for (let i = 0; i < inputNodes.length; ++i) {\n      inputNodes[i].output = inputs[i];\n    }\n\n    // For each connection we accumulate their contribution to the neuron\n    // A neuron can have multiple entry connection this is why its an addition\n    for (const connection of this.connections) {\n      const nodeDest = connection.to;\n      const contribution = connection.from.output * connection.weight;\n      nodeDest.output += contribution;\n    }\n\n    // After we have accumulate the connection contribution to the neuron we add the bias\n    // Then we apply the transformation function (expl: sigmoid)\n    for (const noneInputNode of noneInputNodes) {\n      noneInputNode.output = sigmoid(noneInputNode.output);\n    }\n\n    return outputNodes.map(node => node.output);\n  }\n\n  /**\n   * Remove a specific connection\n   * @param connection\n   */\n  removeConnection(connection: Connection) {\n    const index = this.connections.findIndex(co => connection === co);\n    if (index !== -1) this.connections.splice(index, 1);\n  }\n\n  /**\n   * Remove a node\n   * @param node\n   */\n  removeNode(node: NeuralNode) {\n    this.nodes = this.nodes.filter(n => n !== node);\n    this.connections = this.connections.filter(conn => conn.from !== node && conn.to !== node);\n  }\n\n  /**\n   * Add a node in between a connection\n   * @param connection\n   */\n  addNodeInConnection(connection: Connection) {\n    this.removeConnection(connection);\n\n    const newNode = new NeuralNode({\n      id: ++this.currentNodeId,\n      nodeType: NodeType.HIDDEN\n    });\n\n    this.nodes.push(newNode);\n\n    const connectionToNewNode = new Connection({\n      from: connection.from,\n      to: newNode,\n      weightRange: this.weightRange\n    });\n\n    const connectionFromNewNode = new Connection({\n      from: newNode,\n      to: connection.to,\n      weightRange: this.weightRange\n    });\n\n    this.connections.push(connectionToNewNode, connectionFromNewNode);\n  }\n\n  /**\n   * Add a random connection\n   * @returns\n   */\n  addRandomConnection() {\n    let attemptCount = 0;\n    const maxAttempts = this.nodes.length * this.nodes.length; // A simple upper limit based on the number of possible connections\n\n    while (attemptCount < maxAttempts) {\n      const fromIndex = randomUniform(0, this.nodes.length);\n      const toIndex = randomUniform(0, this.nodes.length);\n\n      if (fromIndex === toIndex) {\n        attemptCount++;\n        continue;\n      }\n\n      const randomConnection = new Connection({\n        from: this.nodes[fromIndex],\n        to: this.nodes[toIndex],\n        weightRange: this.weightRange\n      });\n\n      const exists = this.connections.some(\n        connection =>\n          connection.from === randomConnection.from && connection.to === randomConnection.to\n      );\n\n      if (!exists) {\n        this.connections.push(randomConnection); // Assuming this.connections is the array holding all connections\n        return randomConnection;\n      }\n\n      attemptCount++;\n    }\n\n    throw new Error('Failed to add a new connection: too many attempts.');\n  }\n\n  getWeightRange() {\n    return this.weightRange ?? Connection.DEFAULT_WEIGHT_RANGE;\n  }\n\n  getConnections() {\n    return this.connections;\n  }\n\n  getNodes() {\n    return this.nodes;\n  }\n\n  setConnections(connections: Connection[]) {\n    this.connections = connections;\n  }\n\n  setNodes(nodes: NeuralNode[]) {\n    this.nodes = nodes;\n  }\n\n  /**\n   * Clone the current network\n   * @returns\n   */\n  clone() {\n    const copy = new Network({\n      inputLength: this.inputLength,\n      outputLength: this.outputLength,\n      hiddenLayers: this.hiddenLayers,\n      hiddenLength: this.hiddenLength\n    });\n\n    const connectionsCopy = [...this.getConnections().map(connection => connection.clone())];\n    copy.setConnections(connectionsCopy);\n\n    const nodesCopy = [...this.getNodes().map(node => node.clone())];\n    copy.setNodes(nodesCopy);\n\n    return copy;\n  }\n}\n","/**\n * Sigmoid function to turn any number into the range from 0 to 1\n * Usefull for probability\n * @param x\n * @returns\n */\nexport function sigmoid(x: number): number {\n  return 1 / (1 + Math.exp(-x));\n}\n","import { Base } from './Base';\nimport { Pipe } from './Pipe';\nimport { Sprite } from './Sprite';\nimport { velocity } from './velocity';\nimport { Network } from '../../../neural-box/src';\n\ntype ConstructorProps = {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nconst BIRD_SPRITE = new Sprite('bird.png').sprite;\n\nexport class Bird {\n  private score = 0;\n  private x: number = Bird.BIRD_START_POSITION;\n  private y: number;\n  private vy = 0;\n  private rotation = 0;\n  public isDead = false;\n\n  public brain = new Network({\n    inputLength: 4,\n    outputLength: 1\n  });\n\n  public static BIRD_START_POSITION = 40;\n\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(params: ConstructorProps) {\n    this.canvas = params.canvas;\n    this.ctx = params.ctx;\n    this.y = this.canvas.height / 2;\n\n    this.brain.generateFullNetwork();\n  }\n\n  checkCollision(pipes: Pipe[]) {\n    if (this.isDead) return;\n\n    // Check if we hit the ground\n    if (this.canvas.height - this.y <= Base.BASE_SIZE) {\n      this.isDead = true;\n      this.y = this.canvas.height - Base.BASE_SIZE;\n      return;\n    }\n\n    // Check if we hit the sky\n    if (this.y <= 0) {\n      this.isDead = true;\n      this.y = 0;\n      return;\n    }\n\n    // Check pipe collision\n    for (const pipe of pipes) {\n      if (this.x >= pipe.x && this.x <= pipe.x + pipe.width) {\n        if (this.y <= pipe.height || this.y >= pipe.height + Pipe.PIPE_DISTANCE) {\n          this.isDead = true;\n          return;\n        }\n      }\n    }\n  }\n\n  getFitness() {\n    return this.score;\n  }\n\n  getY() {\n    return this.y;\n  }\n\n  jump() {\n    if (this.isDead) return;\n\n    this.vy = -15;\n    this.rotation = -55;\n  }\n\n  update() {\n    if (this.isDead) {\n      if (this.x > -BIRD_SPRITE.width) this.x -= velocity;\n      return;\n    }\n\n    this.score++;\n    this.vy += 1;\n    this.y += this.vy;\n    this.rotation += 5;\n    if (this.rotation > 90) this.rotation = 90;\n  }\n\n  draw() {\n    this.ctx.save();\n\n    const rotation = this.rotation * (Math.PI / 180);\n    const x = this.x + BIRD_SPRITE.width / 2;\n\n    this.ctx.setTransform(1, 0, 0, 1, x, this.y);\n    this.ctx.rotate(rotation);\n    this.ctx.drawImage(BIRD_SPRITE, -BIRD_SPRITE.width / 2, -BIRD_SPRITE.height / 2);\n\n    this.ctx.restore();\n  }\n}\n","import { Sprite } from './Sprite';\n\ntype ConstructorProps = {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nconst SCORES_SPRITES: HTMLImageElement[] = [];\n\nfor (let i = 0; i < 10; ++i) {\n  const sprite = new Sprite(`${i}.png`);\n  SCORES_SPRITES.push(sprite.sprite);\n}\n\nexport class Score {\n  private score = 0;\n\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(params: ConstructorProps) {\n    this.canvas = params.canvas;\n    this.ctx = params.ctx;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  reset() {\n    this.score = 0;\n  }\n\n  increase() {\n    this.score++;\n  }\n\n  draw() {\n    const strScore = this.score.toString();\n    const scoreNumbers = strScore.split('');\n\n    for (let i = 0; i < scoreNumbers.length; ++i) {\n      const number = Number(scoreNumbers[i]);\n      const numberSprite = SCORES_SPRITES[number];\n      this.ctx.drawImage(\n        numberSprite,\n        this.canvas.width / 2 -\n          (numberSprite.width / 2) * scoreNumbers.length +\n          i * numberSprite.width,\n        20\n      );\n    }\n  }\n}\n","import { Background } from './game/Background';\nimport { Base } from './game/Base';\nimport { Bird } from './game/Bird';\nimport { Pipe } from './game/Pipe';\nimport { Score } from './game/Score';\n\nlet BIRDS_COUNT = 50;\nconst FPS = 30;\nlet SPEED = 2;\nlet GAME_CLOCK: NodeJS.Timeout;\n\nconst canvas = document.querySelector('canvas')!;\nconst ctx = canvas.getContext('2d')!;\nconst speedSettings = document.querySelector('#speed-container')!;\nconst birdsCountSettings = document.querySelector('#birds-count-container')!;\nconst generation = document.querySelector('#generation')!;\nconst bestScore = document.querySelector('#best-score')!;\n\nconst background = new Background({\n  canvas,\n  ctx\n});\nconst base = new Base({\n  canvas,\n  ctx\n});\nconst score = new Score({\n  canvas,\n  ctx\n});\nconst pipes: Pipe[] = [];\nconst birds: Bird[] = [];\n\n/**\n * Init / Reset the game\n */\nfunction initGame() {\n  // Set the generation and best score\n  generation.textContent = String(Number(generation.textContent) + 1);\n  bestScore.textContent = String(Math.max(Number(bestScore.textContent), score.getScore()));\n\n  // Init pipes\n  for (let i = 0; i < canvas.height; i += Pipe.PIPE_RANGE) {\n    const pipe = new Pipe({\n      canvas,\n      ctx,\n      x: canvas.width + i\n    });\n    pipes.push(pipe);\n  }\n\n  // Init birds\n  for (let i = 0; i < BIRDS_COUNT; ++i) {\n    birds.push(\n      new Bird({\n        canvas,\n        ctx\n      })\n    );\n  }\n\n  score.reset();\n}\n\n/**\n * Handle the game\n */\nfunction game() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Backgrou drawing\n  background.draw();\n\n  // Handle pipes\n  let removePipe = false;\n  for (const pipe of pipes) {\n    pipe.update();\n    pipe.draw();\n\n    if (!pipe.passed && pipe.x + pipe.width < Bird.BIRD_START_POSITION) {\n      pipe.passed = true;\n      score.increase();\n    }\n\n    if (pipe.x + pipe.width < 0) {\n      removePipe = true;\n      pipes.push(\n        new Pipe({\n          canvas,\n          ctx,\n          x: pipes[pipes.length - 1].x + Pipe.PIPE_RANGE\n        })\n      );\n    }\n  }\n  if (removePipe) pipes.shift();\n\n  // Draw moving base\n  base.update();\n  base.draw();\n\n  // Draw score\n  score.draw();\n\n  // Handle birds\n  let notAllBirdsDead = false;\n  const closerPipe = pipes.find(pipe => pipe.x + pipe.width > Bird.BIRD_START_POSITION)!;\n  for (const bird of birds) {\n    const pipeXDistance = closerPipe.x - Bird.BIRD_START_POSITION;\n    const pipeUpY = closerPipe.height;\n    const pipeBottomY = closerPipe.height + Pipe.PIPE_DISTANCE;\n\n    const output = bird.brain.input([bird.getY(), pipeXDistance, pipeUpY, pipeBottomY])[0];\n    const shouldJump = output > 0.5;\n    if (shouldJump) bird.jump();\n\n    bird.update();\n\n    bird.checkCollision(pipes);\n    if (!bird.isDead) notAllBirdsDead = true;\n\n    bird.draw();\n  }\n\n  // When all birds are dead we reset the game\n  if (!notAllBirdsDead) {\n    birds.sort((a, b) => b.getFitness() - a.getFitness());\n    const bestBird = birds[0];\n\n    pipes.length = 0;\n    birds.length = 0;\n    initGame();\n\n    const bestBirdReplication = new Bird({\n      canvas,\n      ctx\n    });\n    bestBirdReplication.brain = bestBird.brain;\n    birds.push(bestBirdReplication);\n  }\n}\n\n// Settings\nbirdsCountSettings.addEventListener('click', () => {\n  const selectedBtn = birdsCountSettings.querySelector('input:checked') as HTMLInputElement;\n  BIRDS_COUNT = Number(selectedBtn.value);\n});\n\nspeedSettings.addEventListener('click', () => {\n  const selectedBtn = speedSettings.querySelector('input:checked') as HTMLInputElement;\n  SPEED = Number(selectedBtn.value);\n  clearInterval(GAME_CLOCK);\n  GAME_CLOCK = setInterval(game, 1000 / FPS / SPEED);\n});\n\n// Init and start game\ninitGame();\nGAME_CLOCK = setInterval(game, 1000 / FPS / SPEED);\n"],"names":["Sprite","constructor","src","this","sprite","Image","BASE_SPRITE","Base","params","x","canvas","ctx","update","width","draw","drawImage","height","BASE_SIZE","BACKGROUND_SPRITE","PIPEDOWN_SPRITE","PIPEUP_SPRITE","Pipe","passed","Math","max","random","PIPE_DISTANCE","bottomY","randomUniform","min","PIPE_RANGE","InnovationNumberManager","getInnovationNumber","fromNodeId","toNodeId","key","innovationHistory","has","get","newInnovationNumber","currentInnovationNumber","set","Map","Connection","enbaled","innovationNumber","from","id","to","weight","_a","_c","_b","weightRange","DEFAULT_WEIGHT_RANGE","_e","_d","clone","NodeType","NeuralNode","output","nodeType","BIAS","copy","Network","currentNodeId","fitness","connections","nodes","inputLength","outputLength","Array","isArray","hiddenLength","length","hiddenLayers","Error","generateFullNetwork","nodesOfPrecedentLayer","bias","push","i","input","INPUT","hiddenCreatedNodes","j","hidden","HIDDEN","precedentLayerNode","connection","OUTPUT","inputs","inputNodes","filter","node","outputNodes","inputsToReset","noneInputNodes","inputToReset","nodeDest","contribution","noneInputNode","exp","map","removeConnection","index","findIndex","co","splice","removeNode","n","conn","addNodeInConnection","newNode","connectionToNewNode","connectionFromNewNode","addRandomConnection","attemptCount","maxAttempts","fromIndex","toIndex","randomConnection","some","getWeightRange","getConnections","getNodes","setConnections","setNodes","connectionsCopy","nodesCopy","BIRD_SPRITE","Bird","score","BIRD_START_POSITION","vy","rotation","isDead","brain","y","checkCollision","pipes","pipe","getFitness","getY","jump","save","PI","setTransform","rotate","restore","SCORES_SPRITES","BIRDS_COUNT","GAME_CLOCK","SPEED","document","querySelector","getContext","speedSettings","birdsCountSettings","generation","bestScore","background","base","getScore","reset","increase","scoreNumbers","toString","split","number","Number","numberSprite","birds","initGame","textContent","String","game","clearRect","removePipe","shift","notAllBirdsDead","closerPipe","find","bird","pipeXDistance","pipeUpY","pipeBottomY","sort","a","b","bestBird","bestBirdReplication","addEventListener","selectedBtn","value","clearInterval","setInterval"],"mappings":"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"}